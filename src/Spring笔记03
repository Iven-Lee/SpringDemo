 Aop:面向切面编程， 基于动态代理的，可以使用jdk，cglib两种代理方式。
 Aop就是动态代理的规范化， 把动态代理的实现步骤，方式都定义好了，让开发人员用一种统一的方式，使用动态代理。
    1）需要在分析项目功能时，找出切面。
	2）合理的安排切面的执行时间（在目标方法前， 还是目标方法后）
	3）合理的安全切面执行的位置，在哪个类，哪个方法增加增强功能
 动态代理实现方式：
    1、jdk动态代理：使用jdk中的Proxy，Method，InvocaitonHanderl创建代理对象。
                  jdk动态代理要求目标类必须实现接口

    2、cglib动态代理：第三方的工具库，创建代理对象，原理是继承。 通过继承目标类，创建子类。
                  子类就是代理对象。 要求目标类不能是final的， 方法也不能是final的。

 aop的技术实现框架：
	1.spring：spring在内部实现了aop规范，能做aop的工作。
	          spring主要在事务处理时使用aop。
			  在实际项目开发中很少使用spring的aop实现。 因为spring的aop比较笨重。


    2.aspectJ: 一个开源的专门做aop的框架。spring框架中集成了aspectj框架，通过spring就能使用aspectj的功能。
	           aspectJ框架实现aop有两种方式：
	          1.使用xml的配置文件 ： 配置全局事务
		      2.使用注解，我们在项目中要做aop功能，一般都使用注解， aspectj有5个注解。
                   1）切面的执行时间， 这个执行时间在规范中叫做Advice(通知，增强)
                       在aspectj框架中使用注解表示的。也可以使用xml配置文件中的标签
                        1）前置通知@Before
                        2）后置通知@AfterReturning
                        3）环绕通知@Around
                        4）异常通知@AfterThrowing
                        5）最终通知@After
                   2）表示切面执行的位置，使用的是切入点表达式。
                    execution(访问权限 方法返回值 方法声明(参数) 异常类型)
                    可用符号：
                       *   意义：0至多个任意字符
                       ..  意义:用在方法参数中，表示任意多个参数；用在包名后，表示当前包及其子包路径
                       +   意义:用在类名后，表示当前类及其子类；用在接口后，表示当前接口及其实现类
                        例：execution(public * *(..))
                          指定切入点为：任意公共方法。
                          execution(* set*(..))
                          指定切入点为：任何一个以“set”开始的方法。
                          execution(* com.xyz.service.*.*(..))
                          指定切入点为：定义在 service 包里的任意类的任意方法。
                          execution(* com.xyz.service..*.*(..))
                          指定切入点为：定义在 service 包或者子包里的任意类的任意方法。“..”出现在类名中时，后
                          面必须跟“*”，表示包、子包下的所有类。
                          execution(* *..service.*.*(..))
                          指定所有包下的 serivce 子包下所有类（接口）中所有方法为切入点

 使用aspectj框架实现aop。
 使用aop：目的是给已经存在的一些类和方法，增加额外的功能。 前提是不改变原来的类的代码。
 使用aspectj实现aop的基本步骤：
    1.新建maven项目
    2.加入依赖
      1）spring依赖
      2）aspectj依赖
      3）junit单元测试
    3.创建目标类SomeServiceImpl.java：
      接口com.Iven.AOPDemo.SomeService和他的实现类com.Iven.AOPDemo.SomeServiceImpl。
      要做的是给类中的方法增加功能

    4.创建切面类MyAspectj.java(com.Iven.AOPDemo.MyAspectj)：普通类
      1）在类的上面加入 @Aspect
      2）在类中定义方法， 方法就是切面要执行的功能代码
        在方法的上面加入aspectj中的通知注解，例如@Before
        有需要指定切入点表达式execution()

    5.创建spring的配置文件AOPresource/applicationContext.xml：声明对象，把对象交给容器统一管理
      声明对象你可以使用注解或者xml配置文件<bean>
      1)声明目标对象:<bean id="someService" class="com.Iven.AOPDemo.SomeServiceImpl" />
      2）声明切面类对象:<bean id="myAspect" class="com.Iven.AOPDemo.MyAspectj" />
      3）声明aspectj框架中的自动代理生成器标签。
         自动代理生成器：用来完成代理对象的自动创建功能的。
         <aop:aspectj-autoproxy proxy-target-class="true"/>

    6.创建测试类，从spring容器中获取目标对象（实际就是代理对象）。
      通过代理执行方法，实现aop的功能增强。


基于AOP知识体系：
demo05
     * AOP实现
     * 1）前置通知@Before
     * 2）后置通知@AfterReturning
     * 3）环绕通知@Around
     * 4）异常通知@AfterThrowing
     * 5）最终通知@After
     * 目标类：com.Iven.AOPDemo.SomeServiceImpl
     * 切面类：com.Iven.AOPDemo.MyAspectj
     * AOP配置文件：AOPresource/applicationContext.xml