 事务的隔离级别：有4个值。
		DEFAULT：采用 DB 默认的事务隔离级别。MySql 的默认为 REPEATABLE_READ； Oracle默认为 READ_COMMITTED。
		➢ READ_UNCOMMITTED：读未提交。未解决任何并发问题。
		➢ READ_COMMITTED：读已提交。解决脏读，存在不可重复读与幻读。
		➢ REPEATABLE_READ：可重复读。解决脏读、不可重复读，存在幻读
		➢ SERIALIZABLE：串行化。不存在并发问题。

 事务的超时时间： 表示一个方法最长的执行时间，如果方法执行时超过了时间，事务就回滚。
		         单位是秒， 整数值， 默认是 -1.

 事务的传播行为 ： 控制业务方法是不是有事务的， 是什么样的事务的。
		7个传播行为，表示你的业务方法调用时，事务在方法之间是如果使用的。

			PROPAGATION_REQUIRED
			PROPAGATION_REQUIRES_NEW
			PROPAGATION_SUPPORTS
			以上三个需要掌握的

			PROPAGATION_MANDATORY
			PROPAGATION_NESTED
			PROPAGATION_NEVER
			PROPAGATION_NOT_SUPPORTED

 事务提交事务，回滚事务的时机
       --)当你的业务方法，执行成功，没有异常抛出，当方法执行完毕，spring在方法执行后提交事务。事务管理器commit

	   --)当你的业务方法抛出运行时异常或ERROR， spring执行回滚，调用事务管理器的rollback
	      运行时异常的定义： RuntimeException  和他的子类都是运行时异常， 例如NullPointException , NumberFormatException

	   --)当你的业务方法抛出非运行时异常， 主要是受查异常时，提交事务
          受查异常：在你写代码中，必须处理的异常。例如IOException, SQLException



spring框架中提供的事务处理方案
  适合中小项目使用的， 注解方案。
  spring框架自己用aop实现给业务方法增加事务的功能， 使用@Transactional注解增加事务。
  @Transactional注解是spring框架自己注解，放在public方法的上面，表示当前方法具有事务。
  可以给注解的属性赋值，表示具体的隔离级别，传播行为，异常信息等等

  使用@Transactional的步骤：
      1.需要声明事务管理器对象
        <bean id="xx" class="DataSourceTransactionManager">
      2.开启事务注解驱动， 告诉spring框架，我要使用注解的方式管理事务。
        spring使用aop机制，创建@Transactional所在的类代理对象，给方法加入事务的功能。
        spring给业务方法加入事务：
            在你的业务方法执行之前，先开启事务，在业务方法之后提交或回滚事务，使用aop的环绕通知
             @Around("你要增加的事务功能的业务方法名称")
             Object myAround(){
               开启事务，spring给你开启
                  try{
                     buy(1001,10);
                      spring的事务管理器.commit();
                  }catch(Exception e){
                 spring的事务管理器.rollback();
                  }

             }
      3.在你的方法的上面加入@Trancational

  适合大型项目，有很多的类，方法，需要大量的配置事务，使用aspectj框架功能，在spring配置文件中
   声明类，方法需要的事务。这种方式业务方法和事务配置完全分离。
  实现步骤： 都是在xml配置文件中实现。
       1)要使用的是aspectj框架，需要加入依赖
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>5.2.5.RELEASE</version>
        </dependency>
        2）声明事务管理器对象
        <bean id="xx" class="DataSourceTransactionManager">
        3) 声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）
        4) 配置aop：指定哪些哪类要创建代理。